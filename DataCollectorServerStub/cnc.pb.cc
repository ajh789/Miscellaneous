// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cnc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cnc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace siemens {
namespace cnc {

namespace {

const ::google::protobuf::Descriptor* CncMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CncMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CncParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CncParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cnc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cnc_2eproto() {
  protobuf_AddDesc_cnc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cnc.proto");
  GOOGLE_CHECK(file != NULL);
  CncMsg_descriptor_ = file->message_type(0);
  static const int CncMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, ip_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, param_),
  };
  CncMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CncMsg_descriptor_,
      CncMsg::default_instance_,
      CncMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(CncMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncMsg, _is_default_instance_));
  CncParam_descriptor_ = file->message_type(1);
  static const int CncParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncParam, value_),
  };
  CncParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CncParam_descriptor_,
      CncParam::default_instance_,
      CncParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(CncParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncParam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CncParam, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cnc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CncMsg_descriptor_, &CncMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CncParam_descriptor_, &CncParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cnc_2eproto() {
  delete CncMsg::default_instance_;
  delete CncMsg_reflection_;
  delete CncParam::default_instance_;
  delete CncParam_reflection_;
}

void protobuf_AddDesc_cnc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cnc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcnc.proto\022\013siemens.cnc\032\037google/protobu"
    "f/timestamp.proto\"\221\001\n\006CncMsg\022-\n\ttimestam"
    "p\030\001 \001(\0132\032.google.protobuf.Timestamp\022\020\n\010m"
    "ac_addr\030\002 \001(\t\022\017\n\007ip_addr\030\003 \001(\t\022\017\n\007ip_por"
    "t\030\004 \001(\t\022$\n\005param\030\005 \003(\0132\025.siemens.cnc.Cnc"
    "Param\"\'\n\010CncParam\022\014\n\004name\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\tP\000b\006proto3", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cnc.proto", &protobuf_RegisterTypes);
  CncMsg::default_instance_ = new CncMsg();
  CncParam::default_instance_ = new CncParam();
  CncMsg::default_instance_->InitAsDefaultInstance();
  CncParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cnc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cnc_2eproto {
  StaticDescriptorInitializer_cnc_2eproto() {
    protobuf_AddDesc_cnc_2eproto();
  }
} static_descriptor_initializer_cnc_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CncMsg::kTimestampFieldNumber;
const int CncMsg::kMacAddrFieldNumber;
const int CncMsg::kIpAddrFieldNumber;
const int CncMsg::kIpPortFieldNumber;
const int CncMsg::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CncMsg::CncMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:siemens.cnc.CncMsg)
}

void CncMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

CncMsg::CncMsg(const CncMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:siemens.cnc.CncMsg)
}

void CncMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = NULL;
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CncMsg::~CncMsg() {
  // @@protoc_insertion_point(destructor:siemens.cnc.CncMsg)
  SharedDtor();
}

void CncMsg::SharedDtor() {
  mac_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void CncMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CncMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CncMsg_descriptor_;
}

const CncMsg& CncMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cnc_2eproto();
  return *default_instance_;
}

CncMsg* CncMsg::default_instance_ = NULL;

CncMsg* CncMsg::New(::google::protobuf::Arena* arena) const {
  CncMsg* n = new CncMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:siemens.cnc.CncMsg)
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.Clear();
}

bool CncMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:siemens.cnc.CncMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac_addr;
        break;
      }

      // optional string mac_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "siemens.cnc.CncMsg.mac_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_addr;
        break;
      }

      // optional string ip_addr = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), this->ip_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "siemens.cnc.CncMsg.ip_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip_port;
        break;
      }

      // optional string ip_port = 4;
      case 4: {
        if (tag == 34) {
         parse_ip_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_port().data(), this->ip_port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "siemens.cnc.CncMsg.ip_port"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_param;
        break;
      }

      // repeated .siemens.cnc.CncParam param = 5;
      case 5: {
        if (tag == 42) {
         parse_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:siemens.cnc.CncMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:siemens.cnc.CncMsg)
  return false;
#undef DO_
}

void CncMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:siemens.cnc.CncMsg)
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timestamp_, output);
  }

  // optional string mac_addr = 2;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac_addr(), output);
  }

  // optional string ip_addr = 3;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_addr(), output);
  }

  // optional string ip_port = 4;
  if (this->ip_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_port().data(), this->ip_port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.ip_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_port(), output);
  }

  // repeated .siemens.cnc.CncParam param = 5;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->param(i), output);
  }

  // @@protoc_insertion_point(serialize_end:siemens.cnc.CncMsg)
}

::google::protobuf::uint8* CncMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:siemens.cnc.CncMsg)
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->timestamp_, false, target);
  }

  // optional string mac_addr = 2;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac_addr(), target);
  }

  // optional string ip_addr = 3;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), this->ip_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_addr(), target);
  }

  // optional string ip_port = 4;
  if (this->ip_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_port().data(), this->ip_port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncMsg.ip_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip_port(), target);
  }

  // repeated .siemens.cnc.CncParam param = 5;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->param(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:siemens.cnc.CncMsg)
  return target;
}

int CncMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:siemens.cnc.CncMsg)
  int total_size = 0;

  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // optional string mac_addr = 2;
  if (this->mac_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_addr());
  }

  // optional string ip_addr = 3;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  // optional string ip_port = 4;
  if (this->ip_port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_port());
  }

  // repeated .siemens.cnc.CncParam param = 5;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CncMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:siemens.cnc.CncMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CncMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CncMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:siemens.cnc.CncMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:siemens.cnc.CncMsg)
    MergeFrom(*source);
  }
}

void CncMsg::MergeFrom(const CncMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:siemens.cnc.CncMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  param_.MergeFrom(from.param_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.mac_addr().size() > 0) {

    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  if (from.ip_port().size() > 0) {

    ip_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_port_);
  }
}

void CncMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:siemens.cnc.CncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CncMsg::CopyFrom(const CncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:siemens.cnc.CncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CncMsg::IsInitialized() const {

  return true;
}

void CncMsg::Swap(CncMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CncMsg::InternalSwap(CncMsg* other) {
  std::swap(timestamp_, other->timestamp_);
  mac_addr_.Swap(&other->mac_addr_);
  ip_addr_.Swap(&other->ip_addr_);
  ip_port_.Swap(&other->ip_port_);
  param_.UnsafeArenaSwap(&other->param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CncMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CncMsg_descriptor_;
  metadata.reflection = CncMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CncMsg

// optional .google.protobuf.Timestamp timestamp = 1;
bool CncMsg::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void CncMsg::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& CncMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* CncMsg::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* CncMsg::release_timestamp() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void CncMsg::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.timestamp)
}

// optional string mac_addr = 2;
void CncMsg::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CncMsg::mac_addr() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.mac_addr)
  return mac_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.mac_addr)
}
 void CncMsg::set_mac_addr(const char* value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.mac_addr)
}
 void CncMsg::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.mac_addr)
}
 ::std::string* CncMsg::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CncMsg::release_mac_addr() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.mac_addr)
}

// optional string ip_addr = 3;
void CncMsg::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CncMsg::ip_addr() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.ip_addr)
  return ip_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.ip_addr)
}
 void CncMsg::set_ip_addr(const char* value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.ip_addr)
}
 void CncMsg::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.ip_addr)
}
 ::std::string* CncMsg::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CncMsg::release_ip_addr() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.ip_addr)
}

// optional string ip_port = 4;
void CncMsg::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CncMsg::ip_port() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.ip_port)
  return ip_port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_ip_port(const ::std::string& value) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.ip_port)
}
 void CncMsg::set_ip_port(const char* value) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.ip_port)
}
 void CncMsg::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.ip_port)
}
 ::std::string* CncMsg::mutable_ip_port() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.ip_port)
  return ip_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CncMsg::release_ip_port() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.ip_port)
  
  return ip_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncMsg::set_allocated_ip_port(::std::string* ip_port) {
  if (ip_port != NULL) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.ip_port)
}

// repeated .siemens.cnc.CncParam param = 5;
int CncMsg::param_size() const {
  return param_.size();
}
void CncMsg::clear_param() {
  param_.Clear();
}
const ::siemens::cnc::CncParam& CncMsg::param(int index) const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.param)
  return param_.Get(index);
}
::siemens::cnc::CncParam* CncMsg::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.param)
  return param_.Mutable(index);
}
::siemens::cnc::CncParam* CncMsg::add_param() {
  // @@protoc_insertion_point(field_add:siemens.cnc.CncMsg.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >*
CncMsg::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:siemens.cnc.CncMsg.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >&
CncMsg::param() const {
  // @@protoc_insertion_point(field_list:siemens.cnc.CncMsg.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CncParam::kNameFieldNumber;
const int CncParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CncParam::CncParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:siemens.cnc.CncParam)
}

void CncParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CncParam::CncParam(const CncParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:siemens.cnc.CncParam)
}

void CncParam::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CncParam::~CncParam() {
  // @@protoc_insertion_point(destructor:siemens.cnc.CncParam)
  SharedDtor();
}

void CncParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CncParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CncParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CncParam_descriptor_;
}

const CncParam& CncParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cnc_2eproto();
  return *default_instance_;
}

CncParam* CncParam::default_instance_ = NULL;

CncParam* CncParam::New(::google::protobuf::Arena* arena) const {
  CncParam* n = new CncParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CncParam::Clear() {
// @@protoc_insertion_point(message_clear_start:siemens.cnc.CncParam)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CncParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:siemens.cnc.CncParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "siemens.cnc.CncParam.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "siemens.cnc.CncParam.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:siemens.cnc.CncParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:siemens.cnc.CncParam)
  return false;
#undef DO_
}

void CncParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:siemens.cnc.CncParam)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncParam.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:siemens.cnc.CncParam)
}

::google::protobuf::uint8* CncParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:siemens.cnc.CncParam)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "siemens.cnc.CncParam.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:siemens.cnc.CncParam)
  return target;
}

int CncParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:siemens.cnc.CncParam)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CncParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:siemens.cnc.CncParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CncParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CncParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:siemens.cnc.CncParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:siemens.cnc.CncParam)
    MergeFrom(*source);
  }
}

void CncParam::MergeFrom(const CncParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:siemens.cnc.CncParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CncParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:siemens.cnc.CncParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CncParam::CopyFrom(const CncParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:siemens.cnc.CncParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CncParam::IsInitialized() const {

  return true;
}

void CncParam::Swap(CncParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CncParam::InternalSwap(CncParam* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CncParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CncParam_descriptor_;
  metadata.reflection = CncParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CncParam

// optional string name = 1;
void CncParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CncParam::name() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncParam.name)
}
 void CncParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncParam.name)
}
 void CncParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncParam.name)
}
 ::std::string* CncParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CncParam::release_name() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncParam.name)
}

// optional string value = 2;
void CncParam::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CncParam::value() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncParam.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncParam::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncParam.value)
}
 void CncParam::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncParam.value)
}
 void CncParam::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncParam.value)
}
 ::std::string* CncParam::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncParam.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CncParam::release_value() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncParam.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CncParam::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cnc
}  // namespace siemens

// @@protoc_insertion_point(global_scope)
