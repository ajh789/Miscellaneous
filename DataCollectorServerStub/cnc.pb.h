// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cnc.proto

#ifndef PROTOBUF_cnc_2eproto__INCLUDED
#define PROTOBUF_cnc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace siemens {
namespace cnc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cnc_2eproto();
void protobuf_AssignDesc_cnc_2eproto();
void protobuf_ShutdownFile_cnc_2eproto();

class CncMsg;
class CncParam;

// ===================================================================

class CncMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:siemens.cnc.CncMsg) */ {
 public:
  CncMsg();
  virtual ~CncMsg();

  CncMsg(const CncMsg& from);

  inline CncMsg& operator=(const CncMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CncMsg& default_instance();

  void Swap(CncMsg* other);

  // implements Message ----------------------------------------------

  inline CncMsg* New() const { return New(NULL); }

  CncMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CncMsg& from);
  void MergeFrom(const CncMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CncMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // optional string mac_addr = 2;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 2;
  const ::std::string& mac_addr() const;
  void set_mac_addr(const ::std::string& value);
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  ::std::string* mutable_mac_addr();
  ::std::string* release_mac_addr();
  void set_allocated_mac_addr(::std::string* mac_addr);

  // optional string ip_addr = 3;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 3;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // optional string ip_port = 4;
  void clear_ip_port();
  static const int kIpPortFieldNumber = 4;
  const ::std::string& ip_port() const;
  void set_ip_port(const ::std::string& value);
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  ::std::string* mutable_ip_port();
  ::std::string* release_ip_port();
  void set_allocated_ip_port(::std::string* ip_port);

  // repeated .siemens.cnc.CncParam param = 5;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 5;
  const ::siemens::cnc::CncParam& param(int index) const;
  ::siemens::cnc::CncParam* mutable_param(int index);
  ::siemens::cnc::CncParam* add_param();
  ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >&
      param() const;

  // @@protoc_insertion_point(class_scope:siemens.cnc.CncMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::internal::ArenaStringPtr mac_addr_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr ip_port_;
  ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam > param_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cnc_2eproto();
  friend void protobuf_AssignDesc_cnc_2eproto();
  friend void protobuf_ShutdownFile_cnc_2eproto();

  void InitAsDefaultInstance();
  static CncMsg* default_instance_;
};
// -------------------------------------------------------------------

class CncParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:siemens.cnc.CncParam) */ {
 public:
  CncParam();
  virtual ~CncParam();

  CncParam(const CncParam& from);

  inline CncParam& operator=(const CncParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CncParam& default_instance();

  void Swap(CncParam* other);

  // implements Message ----------------------------------------------

  inline CncParam* New() const { return New(NULL); }

  CncParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CncParam& from);
  void MergeFrom(const CncParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CncParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:siemens.cnc.CncParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cnc_2eproto();
  friend void protobuf_AssignDesc_cnc_2eproto();
  friend void protobuf_ShutdownFile_cnc_2eproto();

  void InitAsDefaultInstance();
  static CncParam* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CncMsg

// optional .google.protobuf.Timestamp timestamp = 1;
inline bool CncMsg::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void CncMsg::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& CncMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* CncMsg::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* CncMsg::release_timestamp() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void CncMsg::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.timestamp)
}

// optional string mac_addr = 2;
inline void CncMsg::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CncMsg::mac_addr() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.mac_addr)
  return mac_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.mac_addr)
}
inline void CncMsg::set_mac_addr(const char* value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.mac_addr)
}
inline void CncMsg::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.mac_addr)
}
inline ::std::string* CncMsg::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CncMsg::release_mac_addr() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.mac_addr)
}

// optional string ip_addr = 3;
inline void CncMsg::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CncMsg::ip_addr() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.ip_addr)
  return ip_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.ip_addr)
}
inline void CncMsg::set_ip_addr(const char* value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.ip_addr)
}
inline void CncMsg::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.ip_addr)
}
inline ::std::string* CncMsg::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CncMsg::release_ip_addr() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.ip_addr)
}

// optional string ip_port = 4;
inline void CncMsg::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CncMsg::ip_port() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.ip_port)
  return ip_port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_ip_port(const ::std::string& value) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncMsg.ip_port)
}
inline void CncMsg::set_ip_port(const char* value) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncMsg.ip_port)
}
inline void CncMsg::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncMsg.ip_port)
}
inline ::std::string* CncMsg::mutable_ip_port() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.ip_port)
  return ip_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CncMsg::release_ip_port() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncMsg.ip_port)
  
  return ip_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncMsg::set_allocated_ip_port(::std::string* ip_port) {
  if (ip_port != NULL) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncMsg.ip_port)
}

// repeated .siemens.cnc.CncParam param = 5;
inline int CncMsg::param_size() const {
  return param_.size();
}
inline void CncMsg::clear_param() {
  param_.Clear();
}
inline const ::siemens::cnc::CncParam& CncMsg::param(int index) const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncMsg.param)
  return param_.Get(index);
}
inline ::siemens::cnc::CncParam* CncMsg::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncMsg.param)
  return param_.Mutable(index);
}
inline ::siemens::cnc::CncParam* CncMsg::add_param() {
  // @@protoc_insertion_point(field_add:siemens.cnc.CncMsg.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >*
CncMsg::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:siemens.cnc.CncMsg.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::siemens::cnc::CncParam >&
CncMsg::param() const {
  // @@protoc_insertion_point(field_list:siemens.cnc.CncMsg.param)
  return param_;
}

// -------------------------------------------------------------------

// CncParam

// optional string name = 1;
inline void CncParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CncParam::name() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncParam.name)
}
inline void CncParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncParam.name)
}
inline void CncParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncParam.name)
}
inline ::std::string* CncParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CncParam::release_name() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncParam.name)
}

// optional string value = 2;
inline void CncParam::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CncParam::value() const {
  // @@protoc_insertion_point(field_get:siemens.cnc.CncParam.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncParam::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:siemens.cnc.CncParam.value)
}
inline void CncParam::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:siemens.cnc.CncParam.value)
}
inline void CncParam::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:siemens.cnc.CncParam.value)
}
inline ::std::string* CncParam::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:siemens.cnc.CncParam.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CncParam::release_value() {
  // @@protoc_insertion_point(field_release:siemens.cnc.CncParam.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CncParam::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:siemens.cnc.CncParam.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cnc
}  // namespace siemens

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cnc_2eproto__INCLUDED
